1. Inheritance: Inheritance is demonstrated through the Hero and Enemy classes inheriting from the Character class. This means that Hero and Enemy automatically have the properties and methods defined in Characters, such as name, health, and the equip method. Inheritance allows for code reuse and the creation of a hierarchical organization of classes.

2. Association: The project demonstrates association through the relationship between the Character class and the Weapon class. A character (either a hero or an enemy) can equip a weapon, which is an instance of the Weapon class. This relationship can be seen as aggregation because the Character has a Weapon, but the existence of a Weapon does not depend on the existence of a Character.

3. Encapsulation: Encapsulation is shown using classes and the definition of properties and methods within those classes. By defining attributes such as name, health, and weapon within the Character class and controlling access to these attributes through methods like __init__ and equip, the implementation details are hidden from the user. This ensures that the internal representation of an object can be changed without affecting the way external code interacts with it.
